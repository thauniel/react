/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/V27PjsUuTYA
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client';
import React, { useState,useEffect} from 'react';
import { SelectValue, SelectTrigger, Select } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";

interface EcComponentsProps {
  // 定义props的类型
}

const EcComponents: React.FC<EcComponentsProps> = () => {

  const [selectedData, setSelectedData] = useState<string[]>([]);

  // 点击事件处理函数，根据不同的按钮设置不同的数据
  const handleBadgeClick = (reviews: string[]) => {
    setSelectedData(reviews);
  };

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <div className="flex justify-between space-x-2 mb-4">
        <Select>
          <SelectTrigger className="border rounded-md py-2 px-4">
            <SelectValue placeholder="商品ジャンルA" />
          </SelectTrigger>
        </Select>
        <Select>
          <SelectTrigger className="border rounded-md py-2 px-4">
            <SelectValue placeholder="商品品種" />
          </SelectTrigger>
        </Select>
      </div>
      <div className="flex space-x-2 mb-4">
        <Badge 
        className="rounded-full py-2 px-4 bg-red-500 text-white" 
        variant="secondary"
        title='positive: negative:'
        onClick={() => handleBadgeClick(["レビュー1", "レビュー2", "レビュー3"])}  
        >
          観点1
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点2
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点3
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点4
        </Badge>
        <Badge className="rounded-full py-2 px-4 " variant="secondary">
          観点5
        </Badge>
        <Badge className="rounded-full py-2 px-4 " variant="secondary">
          観点6
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点7
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点8
        </Badge>
        <Badge className="rounded-full py-2 px-4" variant="secondary">
          観点9
        </Badge>
        <Badge className="rounded-full py-2 px-4 bg-blue-500 text-white" variant="secondary">
          観点10
        </Badge>
      </div>
      <div className="w-full mb-4">
        <ScrollArea className="border rounded-md h-[300px]">
          <div className="flex flex-col space-y-2 p-4">
            {/* 根据 selectedData 数组中的内容渲染 */}
            {selectedData.map((review, index) => (
              <div key={index} className="border-b py-2">{review}</div>
            ))}
          </div>
        </ScrollArea>
      </div>
      <div className="flex justify-between items-center w-full">
        <div className="text-sm text-gray-500 dark:text-gray-400">その他 (以上の範囲を含む)</div>
        <div className="flex space-x-2">
          <Button className="border rounded-full p-2" variant="outline">
            <ChevronUpIcon className="h-4 w-4" />
          </Button>
          <Button className="border rounded-full p-2" variant="outline">
            <ChevronDownIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}

interface ChevronIconProps {
  className?: string;
}

function ChevronDownIcon({ className }: ChevronIconProps) {
  return (
    <svg
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  );
}

function ChevronUpIcon({ className }: ChevronIconProps) {
  return (
    <svg
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m18 15-6-6-6 6" />
    </svg>
  );
}
export default EcComponents;